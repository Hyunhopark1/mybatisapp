**********templates파일 안에 있는 화면파일들은 WebController에서 return으로 파일명을 뿌려줘야 접속가능하다.
[컨트롤러 규칙]
매개변수로 @ModelAttribute를 받는 경우는 메소드방식이 반드시 POST 여야 한다.
매개변수로 @RequestParam을 받는 경우는 메소드방식이 반드시 GET 이어야 한다.  --> URL 주소뒤에 ?변수명=값&변수명2=값2
매개변수로 Model타입을 받을때는 return으로 "Template엔진의 화면파일이름명" 을 보내주어야한다 redirect할때는 소용없다.




<db데이터 다 불러오기>
@GetMapping("/oldhtml/category_old")
public String categoryOld(Model model){

List<ICategory> allList = categoryservice.getAllList();
model.addAttribut("List",allList);

return "oldhtml/category_old";


1. url에 /oldhtml/category_old 주소가 들어오면 ( html의 form action속성에서 / a태그의 href속성에서 )
2. categoryservice의 getAllList메소드로 DB의 데이터들을 모두가져와서 allList변수에 저장
-->service의 getAllList메소드는 mybatisMapper의 findAll()메소드를 호출함, findAll()메소드는 mapper.xml에 설정되어있어야함
3. model의 addAttribute메소드에 키&값으로 가져온 데이터를 저장
4. return으로 templates안의 경로를 적어주면 해당경로의 파일로 이동하게됨

-------------------------------------------------------

@Controller
@RequestMapping("/ctweb")
public class CategoryWebController {

@Autowired
CategoryServiceImpl categoryservice;

<index.html 뿌려주기>
@GetMapping("")    
public String indexHome(){
 return "index";
}
--> URL에 localhost:8082/ctweb  이 들어올 시 index.html을 찾아서 화면에 보여줌

<db의 데이터 전부 가져오기>  --> 초기화면인 index.html에서 a태그 href 속성으로 url을 적어줌 
@GetMapping("/oldhtml/category_old")
public String getCategoryList(Model model){
List<ICategory> allList = categoryservice.getAllList();
model.addAttribute("List",allList);

return "oldhtml/category_old";

--> URL에 localhost:8082/ctweb/oldhtml/category_old 가 들어올 시 templates에서 oldhtml/category_old.html을 찾아서 화면에 보여줌

<db에 데이터 추가하기> --> oldhtml/category_old.html에서 form의 action속성으로 url을 적어줌
여기서 form에 입력된값은 Spring이 자동으로 폼 데이터의 name 속성과 일치하는 CategoryDto 객체의 필드를 찾아 값을 할당한다.
예를들어 <input type="text" id="name" name="name"/> 이면 이 입력값은 CategoryDto의 name 필드에 매핑된다.

@PostMapping("/oldhtml/category_old_act")
public String insertCategory(@ModelAttribute CategoryDto dto){
 this.categoryservice.insert(dto);
 return "redirect:category_old";

---> URL에 oldhtml/category_old_act가 들어올 시 form에 입력된 id, name값이 CategoryDto의 id,name필드와 자동으로 매핑되어
매개변수로 받은 CategoryDto 객체를 service의 insert함수로 DB에 저장한 후 category_old.html로 리다이렉트


<화면의 데이터를 클릭하면 수정/삭제할수 있는 페이지로 이동하기>

@GetMapping("/oldhtml/category_old_view")
public String viewCategory(@RequestParam Long id, Model model){
  ICategory find = service.findById(id);
  model.addAttribute(find)

  return "oldhtml/category_old_view";


@PostMapping("/oldhtml/category_old_update")
public String categoryUpdate(










@GetMapping("/oldhtml/category_old")
public String categoryOld(Model model){

 List<ICategory> list = this.service.getAllList();
 model.addAttribute("List",list);


return "oldhtml/category_old";



@PostMapping("/oldhtml/category_old_add")
public String categoryAdd(CategoryDto dto){
 service.insert(dto);
  

return "redirect:oldhtml/category_old";
